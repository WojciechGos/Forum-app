<style type="text/css" scoped>
    .entry_finish_container{
        width: 100%;
        height: 10vh;
        display: flex;
        justify-content: center;
    }
</style>

<script>
    const post_container = document.querySelector('.post-container')
    let block = false
    let errorShow = false
    let index= 2
    let filter_thread = null
    let currentDate = new Date().toISOString()
    initEntries()
    document.addEventListener('scroll', e=>{
        let entry
        
        if ((window.innerHeight + window.scrollY) >= document.body.scrollHeight && !isFetchBlocked()) {
            for(let i=index; i<index+5; ++i){
                fetchAndAddEntry(i)
            }
            index += 5;
        }else if(((window.innerHeight + window.scrollY) >= document.body.scrollHeight) && isFetchBlocked()){
            showError()
        }

    })
    function blockFetch(){
        block = true
    }
    function isFetchBlocked(){
        return block
    }
    function initEntries(){
        for(let i=0; i<4; ++i){
            fetchAndAddEntry(i)
        }
        index = 4
        
    }
    function isErrorShowed(){
        return errorShow
    }
    function showError(){
        if(!isErrorShowed()){
            errorShow = true
            post_container.innerHTML += `
            <div class="entry_finish_container" >
                <button class="btn btn-primary">
                    za≈Çaduj post
                    </button>
                    </div>
                    `
        }
    }

    async function fetchAndAddEntry(i){
        if(isFetchBlocked()){
            return 
        }
        entry = await fetchEntry(currentDate, i, 'none')

        if (entry.succes) {
            addEntry(entry)
        }
        else {
            blockFetch()
            // show info with button that enable refreshing info 
        }
    }

    function addEntry(data) {
        let user_name = data.user_name
        let thread = data.thread
        let date = data.date
        let title = data.title
        let content = data.content
        let entry =
            `<div class="card container-fluid">
                <div class="card-body">
                    <div class="row d-flex">
                        <div class="col">
                            ${user_name}
                        </div>
                        <div class="col">
                            ${thread}
                        </div>
                        <div class="col">
                            ${date}
                        </div>
                    </div>
                    <div class="row my-4">
                        <h4 class="card-title mb-3">
                            ${title}
                        </h4>
                        <p class="card-text">
                            ${content}   
                        </p>
                    </div>
                    <div class="row">
                        
                    <div class="accordion" id="accordionExample">
                        <div class="accordion-item">
                    <h2 class="accordion-header" id="headingOne">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne"
                            aria-expanded="false" aria-controls="collapseOne">
                            Accordion Item #1
                        </button>
                    </h2>
                    <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne"
                        data-bs-parent="#accordionExample" style="">
                        <div class="accordion-body">
                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin
                            adds the appropriate classes that we use to style each element. These classes control the overall
                            appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom
                            CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the
                            <code>.accordion-body</code>, though the transition does limit overflow.
                        </div>
                    </div>
                </div>
                </div>
                    </div>

            </div>`
        post_container.innerHTML += entry
    }
    const btn_collapse = document.getElementById('collapse-btn')
    const btn_ex = document.getElementById('btn-ex')
     

        btn_ex.addEventListener('click', (e) => {
            console.log("im trying")
            // if(open){
            //     aria = false

            //     open = false
            // }   
            // else{
            //     aria = true
            //     open = true
            // }
        })
    console.log(btn_collapse)
    console.log(btn_ex)
    const aria = document.getElementById('collapse-btn').getAttribute('aria-expanded')
    let open = true
    
    btn_collapse.addEventListener('click', (e)=>{
        console.log("im trying")
        // if(open){
        //     aria = false
            
        //     open = false
        // }   
        // else{
        //     aria = true
        //     open = true
        // }
    })
    
              
    function fetchEntry(date, index, thread) {
        console.log(date)
        let link = `entry/${date}/${index}/${thread}`
        return fetch(link, {
            method: "GET"
        })
        .then(response => {
            return response.json()
        })
        .then(data => {
            return data
        })
        .catch(e => {
            console.error(e)

        })
    }

</script>